--@name PropMeshRender
--@author Twig
--@shared
//Shared

if SERVER then
    //Server
    
else
    //Client
    local function propToMesh(ModelName,Material,booleanURL,offsetVector)
        local visualMeshes = mesh.getModelMeshes(ModelName)
        if visualMeshes[1]==nil then return end
        for k, v in ipairs(visualMeshes[1].triangles) do
            v.weights = nil
            if offsetVector then
                v.pos = v.pos+offsetVector
            end
        end
        
        local model = mesh.createFromTable(visualMeshes[1].triangles)
        if booleanURL then
            mat = render.createMaterial(Material)
        else
            mat = material.load(Material)
        end
        local a = {}
        a["Model"] = model
        a["Material"] = mat
        return a
    end
    //Usage: propToMesh(PropModelPath,Material,BooleanURL,OptionalOffsetVector)
    
    local function advDraw(DatTbl,Pos,Ang,Scale,isWorld)
        if DatTbl then
            local wrld = false
            if isWorld then
                wrld = true
            end
            
            local Mtrx = Matrix()
            local model = DatTbl["Model"]
            local mat = DatTbl["Material"]
            Mtrx:setTranslation(Pos)
            if Ang then
                Mtrx:setAngles(Ang)
            end
            if Scale then
                Mtrx:setScale(Scale)
            end
            render.pushMatrix(Mtrx,wrld)
            render.setMaterial(mat)
            model:draw()
            render.popMatrix()
        end
    end
    // Usage: advDraw(PropToMeshTable,VectorPosition,Angle,OptionalScaleVector,OptionalBooleanWorld)
    
    prop1 = propToMesh("models/props_c17/oildrum001.mdl","models/props_c17/oil_drum001a")
    
    hook.add("render","",function()
        advDraw(prop1,chip():getPos(),chip():getAngles(),Vector(1),true)
    end)
end
